
name: Deploy Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint || echo "No linting configured"
      
    - name: Run tests
      run: npm test || echo "No tests configured"
      
    - name: Build frontend
      run: npm run build
    
    - name: Build backend
      working-directory: ./backend
      run: npm ci && npm run build
      
    - name: Build Docker image
      run: docker build . --file Dockerfile --tag app:${{ github.sha }}
      
    - name: Run Docker container tests
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
        sleep 15  # Attendre que les services d√©marrent
        curl -f http://localhost:3000/health || exit 1
        docker-compose -f docker-compose.yml -f docker-compose.test.yml down
      
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
    - name: Push Docker image
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        docker tag app:${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest
        docker tag app:${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}/app:${{ github.sha }}
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/app:${{ github.sha }}
    
    - name: Deploy to production server
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /opt/app
          docker-compose down
          git pull
          docker-compose pull
          docker-compose up -d
          docker system prune -af
